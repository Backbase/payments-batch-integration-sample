package com.mybank.payments.batches.integration.executor.nachafile;

import static com.backbase.batches.nacha.model.FileRequest.FileMode.USER;

import com.backbase.batches.nacha.NachaHandler;
import com.backbase.batches.nacha.dataprovider.FileSequenceProvider;
import com.backbase.batches.nacha.exception.UnableToCreateFileWriter;
import com.backbase.batches.nacha.exception.UnableToCreateTempFile;
import com.backbase.batches.nacha.model.FileRequest;
import com.backbase.batches.nacha.model.FileRequest.FileRequestBuilder;
import com.backbase.batches.nacha.model.result.BankResult;
import com.backbase.batches.nacha.model.result.BankResult.BankBatchOrderResult;
import com.backbase.batches.nacha.model.result.BankResult.BankPaymentItemResult;
import com.backbase.batches.nacha.model.result.HandlerResult;
import com.backbase.batches.nacha.model.result.StatusInfo;
import com.backbase.payments.batches.integration.outbound.model.PostBatchOrderRequest;
import com.mybank.payments.batches.integration.executor.BatchOrderExecutor;
import com.mybank.payments.batches.integration.ExampleMode;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

/**
 * This implementation uses Spring RestTemplate API client and NachaWriter library to work with nacha files.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class NachaBatchOrderExecutor implements BatchOrderExecutor {

    private final Queue<PostBatchOrderRequest> batchRequestQueue;

    private final NachaHandler nachaHandler;
    private final ProcessedNachaFilesResultsExecutor processedNachaFilesExecutor;
    private final FileSequenceProvider fileSequenceProvider;

    /**
     * Scheduled method, periodically picking up all the batch orders from the queue created by the BatchOrderController
     * then generating and processing nacha file
     */
    @Override
    public void execute() {
        log.info("Batch scheduler start with {} batch orders", batchRequestQueue.size());
        List<FileRequest> groupedFileRequests = groupByUsers(batchRequestQueue);
        log.debug("Grouped fileRequests: {}", groupedFileRequests);
        groupedFileRequests.forEach(fileRequest -> {
            log.debug("Nacha file generation started with request {}", fileRequest);
            //getFileWriter() can be replaced with proper Writer implementation
            Writer writer = getFileWriter(createTempFile(fileRequest));
            HandlerResult handlerResult = nachaHandler.handle(fileRequest, writer, this::processGeneratedNachaFile);
            log.debug("Handler result after generating and uploading file {}", handlerResult);
            processedNachaFilesExecutor.saveNachaHandlerResult(handlerResult);
        });
        log.info("Batch process scheduler end");
    }

    public List<FileRequest> groupByUsers(Queue<PostBatchOrderRequest> batchOrderRequestsQueue) {
        //Generating new fileRequest for every bank user companyId
        Map<String, FileRequestBuilder> fileRequestMap = new HashMap<>(batchOrderRequestsQueue.size());
        while (!batchOrderRequestsQueue.isEmpty()) {
            PostBatchOrderRequest batchItem = batchOrderRequestsQueue.poll();
            Character dailyId = fileSequenceProvider.getDailyId(batchItem.getCompanyId());
            FileRequestBuilder fileRequestBuilder = fileRequestMap.computeIfAbsent(batchItem.getCompanyId(),
                companyIdKey -> FileRequest.builder()
                    .fileMode(USER)
                    .companyId(companyIdKey)
                    .companyName(batchItem.getCompanyName())
                    .fileDailyId(dailyId)
                    .fileReferenceCode("BFT000" + dailyId));
            fileRequestBuilder.batchOrderId(batchItem.getId());
        }
        return fileRequestMap.values().stream()
            .map(FileRequestBuilder::build)
            .collect(Collectors.toList());
    }

    /**
     * Dummy method for processing nacha file by the client
     *
     * @param writer with all the nacha file data generated by NachaWriter based on fileRequest
     * @return result of client processing with batches and payment statuses
     */
    private BankResult processGeneratedNachaFile(Writer writer) {
        log.info("Client processing started");
        try {
            writer.close();
        } catch (IOException e) {
            throw new RuntimeException("Unable to close writer", e);
        }

        return BankResult.builder()
            .batch("BATCH1REF", BankBatchOrderResult.builder()
                .batchNumber("BATCH1REF")
                .statusInfo(new StatusInfo(true, "RejectedBankStatus1", "ReasonCode1", "ReasonText1",
                    "ReasonDescription1"))
                .build())
            .batch("BATCH2REF", BankBatchOrderResult.builder()
                .batchNumber("BATCH2REF")
                .statusInfo(new StatusInfo(false, "ApprovedBankStatus2", null, null, null))
                .entry("21", BankPaymentItemResult.builder()
                    .traceNumber("21")
                    .statusInfo(new StatusInfo(false, "ApprovedBankStatus21", null, null, null))
                    .build())
                .entry("22", BankPaymentItemResult.builder()
                    .traceNumber("22")
                    .statusInfo(new StatusInfo(true, "RejectedBankStatus22", "ReasonCode22", "ReasonText22",
                        "ReasonDescription22"))
                    .build())
                .build())
            .batch("BATCH3REF", BankBatchOrderResult.builder()
                .batchNumber("BATCH3REF")
                .statusInfo(new StatusInfo(true, "RejectedBankStatus3", "ReasonCode3", "ReasonText3",
                    "ReasonDescription3"))
                .build())
            .build();
    }

    private File createTempFile(FileRequest fileRequest) {
        try {
            return File.createTempFile(
                String.format("%s_%s_", fileRequest.getFileReferenceCode(), fileRequest.getFileDailyId()),
                ".ach");
        } catch (IOException e) {
            throw new UnableToCreateTempFile(e);
        }
    }

    private Writer getFileWriter(File tempFile) {
        try {
            return new FileWriter(tempFile);
        } catch (IOException e) {
            throw new UnableToCreateFileWriter(e);
        }
    }

    @Override
    public ExampleMode getType() {
        return ExampleMode.NACHA_FILE;
    }
}